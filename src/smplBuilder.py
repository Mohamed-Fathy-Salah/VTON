import importlib
import os
import torch
from smplpytorch.smplpytorch.pytorch.smpl_layer import SMPL_Layer
import numpy as np
import sys
from TailorNet import run


# run.gen_body_gar()


def convertWeight(w, gender):
    w = w*100
    female_a = -2.35648430867
    female_b = 1001.43505432
    male_a = -5.28069181198
    male_b = 1056.44071546
    if(gender == 'female'):
        weight = (w - female_a) / female_b
    else:
        weight = (w - male_a) / male_b
    return weight**(1.0 / 3.0)


'''
Measuremnts:
chest_circumference, height,inseam, pelvis_circumference, shoulder_width, waist_circumference,weight
'''
input = [0]*10

upper_garment_class = sys.argv[10]
lower_garment_class = sys.argv[11]
upper_garment_texture = sys.argv[12]
lower_garment_texture = sys.argv[13]


for i in range(7):
    input[i] = float(sys.argv[i+1])/100
# input = [1.00332699,1.65933,0.71348309,1.07099734,0.34498866,0.65542279,60]
gender = sys.argv[8].lower()
coefs = intercept = betas = [0]*10


if(gender == 'female'):
    coefs = [[0.8118823829649713, 5.976566611152309, 6.459990199283558, -2.2026636539095774, 7.647694415803498, -4.023353000029757, 28.253916435606843], [0.9023790748152676, 9.039201683762697, -1.3032244060952056, 1.4586944390523064, -7.154308237278915, -7.482966547812037, -12.249205769619307], [-7.863070469192281, 38.944492511691294, -39.71437567667207, 9.135408822276776, -24.732656993267216, 22.994388129768286, -118.4533193787501], [-4.971958713661899, -17.584202917660626, 27.84561262048449, 11.227251469370284, -45.185714691065144, 17.11481530667062, -33.142402545085766], [-5.411357227697472, 9.585729133807058, -1.3700861194149891, -1.2593760463431627, -25.386547458550776, 26.025144583216107, -76.63632119178],
             [24.176184261053777, -14.267377965504224, 1.1464669058827321, -8.438439937331914, -29.103201087072236, -56.29963155919151, 200.3791386522453], [30.421107269081617, 0.01895719481861846, 3.1452734404784204, -15.385119140539924, -20.487321748692185, -17.777303373188353, 27.56345080591638], [9.659168437347144, -1.1139997519873406, 3.567430198817442, 7.853961414734773, -5.400285160251275, -8.145273016299429, -19.644337303060496], [-16.570634813698845, 8.760749069554679, -0.4851317982280896, 18.093472493466553, 24.544556646376492, 32.87273398146301, -153.96004746050795], [8.270556774791697, -6.459568935727405, 8.723942955718966, 13.622628982075305, 43.57509996881096, -13.19212000470709, -38.57044331839046]]
    intercept = [-23.818874896975156, -2.62240808705482, -0.5151082073397478, 16.88433837741541, 9.923531362488424, -
                 16.786654668661882, -5.425297654075341, -1.886221285556629, 9.91872378932909, -6.2545770487939425]
    input[6] = convertWeight(input[6], 'female')
else:
    coefs = [[-1.641924796309873, -9.3248677736079, -2.522335729002137, 0.615212061803641, -4.722739034268763, 0.7968384479425037, -5.488019100805785], [-2.6225769750836703, 8.604015535897268, 1.5905712439955861, 6.089185917930352, -5.947501549916017, -2.1233722704956244, -39.35874903956436], [-16.29087388310385, 16.267264587042458, -18.317339472263384, -2.5285008748365083, -11.22334142735637, 7.594430729129229, 9.183306597774893], [-2.2843382549030418, 9.434511893434488, -15.340391811882451, -3.739935900410189, 26.0231049161014, -14.636591277580763, 35.184531057627574], [-7.868668988487187, 0.25800104679463676, 3.083500947795541, 13.034377737824274, 35.513224255319685, 11.493961300787184, -87.08608500458097],
             [8.83371659408853, -12.800736631894878, 9.045097937568755, 16.783918645910976, -34.90579658199215, -12.97682029225377, 42.24178356882659], [19.514276944599764, 7.792766787906802, -1.9024599576512458, -20.442198497764984, -44.992871338856474, 10.477374170192807, -25.162238223964753], [1.9585041645597119, 11.698343326467507, -0.47313013784064384, 32.65530893745237, 29.63900280384069, 22.265138867620408, -230.85648350014588], [4.285867080196956, 15.23149119715134, -1.98176522723888, 42.151173474930324, 19.589652286652882, 29.024422920539216, -290.55761536705444], [11.269131494729855, 5.647154390613647, 4.468673940079933, 7.053895469613398, 48.907127761934426, 8.93775994228641, -143.83435961356352]]
    intercept = [23.425288556277376, 1.3806234691960335, -1.2683641558425605, -11.094709764764996,
                 4.355131387719672, -2.763257876636448, 7.672337683295892, 10.47217752259279, 16.676587956500544, 0.751957250206795]
    input[6] = convertWeight(input[6], 'male')


for i in range(10):
    products = 0
    for j in range(7):
        products += coefs[i][j] * input[j]
    betas[i] = products + intercept[i]

# print(betas)
# smpl_layer = SMPL_Layer(
#     center_idx=0,
#     gender=sys.argv[8].lower(),
#     model_root='src/smplpytorch/smplpytorch/native/models')

# set pose and shope to zero
# pose_params = torch.zeros(1, 72)
pose_params = np.zeros(72)
shape_params = torch.Tensor([betas])

# # set pose
# # value  = random.uniform(0.5,1.3)
if(sys.argv[9].lower() == 'a pose'):
    pose_params = [0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00, -2.4503335e-02, -8.6571239e-03,  0.0000000e+00, -1.5436116e-02,  2.1324832e-02,  3.2871157e-02,  2.5250642e-02,  1.7643716e-02,  0.0000000e+00,  0.0000000e+00, -0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00, -4.1507773e-02,  5.2856508e-04, -2.2849828e-02,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,
                   0.0000000e+00, -4.4714343e-02, -1.9178228e-03, -5.8859773e-02, -8.1154391e-02,  5.2527897e-02, -1.6531804e-01, -1.0139212e-01,  1.6047543e-02,  1.7857882e-01,  2.6005106e-02,  1.8749528e-02,  2.7829843e-02,  1.4861186e-01, -1.5672915e-01, -6.9892877e-01,  2.0513296e-01,  6.4376682e-02,  6.2391913e-01, -8.3534569e-02, -6.4230874e-02,  9.2654817e-02, -2.0767595e-01,  7.6475807e-02, -1.5509140e-01,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00,  0.0000000e+00]
    # value = 5.6
    # pose_params[0][50] = value
    # pose_params[0][53] = -value
elif(sys.argv[9].lower() == 'y pose'):
    pose_params = [4.5648485e-02, -3.7734228e-04,  1.6529273e-02, -6.5164685e-02, -6.1648544e-02,  5.1360708e-02, -3.6783971e-02, -3.3342086e-02, -2.9564897e-02,  1.6729887e-01,  4.1662090e-02, -1.6997023e-03, -7.2184116e-02, -2.3083657e-01, -3.2917593e-02, -6.9401599e-02, 1.5775968e-01, -2.4924414e-02, -5.4640156e-01, -3.1075779e-02, -8.0134504e-02, -1.0423581e-02,  4.0360582e-01, -5.2249309e-02, -8.0256864e-02, -3.9055908e-01,  8.9712180e-02,  6.9720805e-02, 6.4953126e-02,  5.4304212e-02, -1.2347241e-01, -1.8699022e-03, 2.7832481e-01,  3.1967487e-02,  1.8178043e-01, -
                   2.2990488e-01, -1.0236661e-01, -1.5770936e-01, -3.7797850e-02, -4.2461812e-01, -8.7319128e-03,  1.4238487e-02, -4.2809409e-01,  1.5364258e-01, -4.5624454e-02, -1.7199343e-01,  2.6442509e-03,  4.1791927e-02, -2.3397626e-01, -2.5276369e-01,  2.4494478e-01, -2.8614631e-01, 8.2428781e-03, -2.9429427e-01, -5.0907993e-01, -1.0018810e+00, 6.7369121e-01, -5.4512608e-01,  1.0408442e+00, -7.2942209e-01, 1.0594031e-01, -3.8232526e-01,  7.8706902e-01,  1.9215629e-01, 3.7983841e-01, -1.3013129e-01,  2.3594241e-01, -3.3484966e-01, -2.0136189e-01, -4.3465069e-01,  2.1693294e-01,  3.9957082e-01]


# print(pose_params.numpy())
# print(shape_params.numpy())


# run.gen_body(theta= np.array(pose_params),beta= np.array(betas), gender=gender)
if upper_garment_class == 'no_garment' and lower_garment_class == 'no_garment':
    run.gen_body(theta=np.array(pose_params),
                 beta=np.array(betas), gender=gender)
else:
    run.gen_body_gar(theta=np.array(pose_params), beta=np.array(
        betas), gender=gender, upper_garment_class=upper_garment_class, lower_garment_class=lower_garment_class, upper_garment_texture=upper_garment_texture, lower_garment_texture=lower_garment_texture)

    # os.system('blender -b -P src\TailorNet\texture_mesh.py "F:\three.js traing\GP-Demo\src\models\obj\gar.obj" "F:\three.js traing\GP-Demo\src\models\tex\tex.jpg"')
    # run.gen_body_gar(beta= np.array(betas),garment_class = 't-shirt')


# if garment_class == 'no_garment':
#     #verts, Jtr = smpl_layer(pose_params.float(), th_betas=shape_params)

#     #mesh = trimesh.Trimesh(verts.cpu()[0], smpl_layer.th_faces.cpu())
#     #trimesh.smoothing.filter_humphrey(mesh)

#     #trimesh.exchange.export.export_mesh( mesh, f"src/models/obj/body.obj", file_type='obj', header=None)
#     #mesh.show()
#     os.system('python TailorNet/run.py '+ pose_params + " "+shape_params +" "+gender)
# else:
#     os.system('python TailorNet/run.py '+ pose_params + " "+shape_params +" "+gender +" "+ garment_class)
